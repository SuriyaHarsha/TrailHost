{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport noteService from \"./noteService\";\nconst initialState = {\n  notes: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\n\n// Get ticket notes\nexport const getNotes = createAsyncThunk(\"notes/getAll\", async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.getNotes(ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Create ticket note\nexport const createNote = createAsyncThunk(\"notes/create\", async ({\n  noteText,\n  ticketId\n}, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.createNote(noteText, ticketId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: \"note\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = action.payload;\n    }).addCase(getNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes.push(action.payload);\n    }).addCase(createNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","noteService","initialState","notes","isError","isSuccess","isLoading","message","getNotes","ticketId","thunkAPI","token","getState","auth","user","error","response","data","toString","rejectWithValue","createNote","noteText","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","push","actions","reducer"],"sources":["C:/Users/jsasi/Desktop/Mern/supportdesk/frontend/src/redux/notes/noteSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport noteService from \"./noteService\";\r\n\r\nconst initialState = {\r\n  notes: [],\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n};\r\n\r\n// Get ticket notes\r\nexport const getNotes = createAsyncThunk(\r\n  \"notes/getAll\",\r\n  async (ticketId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token;\r\n      return await noteService.getNotes(ticketId, token);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Create ticket note\r\nexport const createNote = createAsyncThunk(\r\n  \"notes/create\",\r\n  async ({ noteText, ticketId }, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user.token;\r\n      return await noteService.createNote(noteText, ticketId, token);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const noteSlice = createSlice({\r\n  name: \"note\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getNotes.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getNotes.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.notes = action.payload;\r\n      })\r\n      .addCase(getNotes.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(createNote.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(createNote.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.notes.push(action.payload);\r\n      })\r\n      .addCase(createNote.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = noteSlice.actions;\r\nexport default noteSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}